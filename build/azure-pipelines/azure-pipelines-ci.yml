# Continuous Integration Pipeline
# https://aka.ms/yaml

parameters:
- name: vmImage
  displayName: 'Pool Image'
  type: string
  default: 'windows-latest'
  values:
  - windows-latest
  - ubuntu-latest
  - macOS-latest

trigger:
  batch: true
  branches:
    include:
    - master
    - preview
  paths:
    include:
    - src/*

pr: none

variables:
  vmImage: '${{ parameters.vmImage }}'
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    moduleName: 'AzureADAssessment'
    prereleaseTag: 
    moduleGuid: 
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    moduleName: 'AzureADAssessmentPreview'
    prereleaseTag: 'preview'
    moduleGuid: '8d332e73-4c84-4332-8eab-d960d2c04653'
  artifactModule: 'PSModule'
  #artifactModuleSigned: 'PSModuleSigned'
  #artifactModulePackage: 'PSModulePackage'

pool:
  vmImage: $(vmImage)

stages:
- stage: Build
  jobs: 
  - job: Prepare
    variables:
      skipComponentGovernanceDetection: true
    steps:
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Build.SourcesDirectory)/src/*.psd1" -TrimVersionDepth 2'
        pwsh: true

  - job: Build
    dependsOn: Prepare
    variables: 
      moduleNameSrc: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
      moduleRename: '$[ variables[''moduleName''] ]'
      moduleVersionSrc: '$[ coalesce(dependencies.Prepare.outputs[''ModuleInfo.moduleVersionTrimmed''], dependencies.Prepare.outputs[''ModuleInfo.moduleVersion'']) ]'
      moduleVersion.Revision: '$[ counter(variables[''moduleVersionSrc''], 0) ]'
      moduleVersion: '$[ coalesce(variables[''moduleVersionOverride''], format(''{0}.{1}'', variables[''moduleVersionSrc''], variables[''moduleVersion.Revision''])) ]'
    steps:
    - template: template-psmodule-build.yml
      parameters:
        moduleName: '$(moduleNameSrc)'
        moduleRename: '$(moduleRename)'
        moduleGuid: '$(moduleGuid)'
        moduleVersion: '$(moduleVersion)'
        prereleaseTag: '$(prereleaseTag)'

  # - job: Sign
  #   dependsOn:
  #   - Prepare
  #   - Build
  #   variables:
  #     #moduleName: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
  #     skipComponentGovernanceDetection: true
  #   pool:
  #     vmImage: 'windows-latest'
  #   steps:
  #   - download: current
  #     artifact: '$(artifactModule)'
  #   - template: template-psmodule-sign.yml
  #     parameters:
  #       moduleName: '$(moduleName)'

#- stage: Test
#  dependsOn: Build
#  jobs: 
#  - job: Test
#    steps:
#    - script: 'echo ToDo: Integrate Pester Tests'
